{"ast":null,"code":"import { getToken } from \"./users-service\";\nconst BASE_URL = \"/api/posts\";\n\nasync function getAllPosts() {\n  const res = await fetch(BASE_URL, {\n    method: \"GET\"\n  });\n\n  if (res.ok) {\n    return res.json();\n  } else {\n    throw new Error(\"Unable to retrieve posts.\");\n  }\n}\n\nasync function getOnePost(id) {\n  const res = await fetch(`${BASE_URL}/${id}`, {\n    method: \"GET\"\n  });\n\n  if (res.ok) {\n    return res.json();\n  } else {\n    throw new Error(\"Unable to retrieve post.\");\n  }\n}\n\nasync function create(data) {\n  const payload = {\n    title: data.title,\n    text: data.text,\n    itemsOffered: data.itemsOffered\n  };\n  const res = await fetch(BASE_URL, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Authorization\": \"Bearer \" + getToken()\n    },\n    body: JSON.stringify(payload)\n  });\n\n  if (res.ok) {\n    return \"Post created successfully.\";\n  } else {\n    throw new Error(\"Unable to create post.\");\n  }\n}\n\nasync function makeBid(postId, data) {\n  const payload = {\n    itemsOffered: data.itemsOffered,\n    text: data.description\n  };\n  const res = await fetch(`${BASE_URL}/${postId}/reply`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Authorization\": \"Bearer \" + getToken()\n    },\n    body: JSON.stringify(payload)\n  });\n\n  if (res.ok) {\n    return \"Bid created successfully.\";\n  } else {\n    throw new Error(\"Unable to create bid.\");\n  }\n}\n/* postId is acually not used here, but keeping it for consistency\n * with the api route */\n\n\nasync function getOneDeal(postId, replyId) {\n  const res = await fetch(`${BASE_URL}/${postId}/deals/${replyId}`, {\n    method: \"GET\"\n  });\n\n  if (res.ok) {\n    return res.json();\n  } else {\n    return null;\n  }\n}\n\nasync function startDeal(postId, replyId) {\n  const res = await fetch(`${BASE_URL}/${postId}/deals/${replyId}`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Authorization\": \"Bearer \" + getToken()\n    }\n  });\n\n  if (res.ok) {\n    return true;\n  } else {\n    throw new Error(\"Unable to start deal.\");\n  }\n}\n\nasync function confirmDealToggle(postId, replyId) {\n  const res = await fetch(`${BASE_URL}/${postId}/deals/${replyId}/confirm`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Authorization\": \"Bearer \" + getToken()\n    }\n  });\n\n  if (res.ok) {\n    return true;\n  } else {\n    throw new Error(\"Unable to confirm deal.\");\n  }\n}\n\nasync function deleteDeal(postId, replyId) {\n  const res = await fetch(`${BASE_URL}/${postId}/deals/${replyId}/delete`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Authorization\": \"Bearer \" + getToken()\n    }\n  });\n\n  if (res.ok) {\n    return res;\n  } else {\n    throw new Error(\"Unable to confirm deal.\");\n  }\n}\n\nasync function deletePost(postId) {\n  const res = await fetch(`${BASE_URL}/${postId}/delete`, {\n    method: \"POST\",\n    headers: {\n      \"Authorization\": \"Bearer \" + getToken()\n    }\n  });\n\n  if (res.ok) {\n    return await res.json();\n  } else {\n    throw new Error(\"Unable to delete Post\");\n  }\n}\n\nasync function deleteReply(replyId) {\n  const res = await fetch(`/api/replies/${replyId}/delete`, {\n    method: \"POST\",\n    headers: {\n      \"Authorization\": \"Bearer \" + getToken()\n    }\n  });\n\n  if (res.ok) {\n    return res;\n  } else {\n    throw new Error(\"Unable to delete bid\");\n  }\n}\n\nconst postsApi = {\n  getAllPosts,\n  create,\n  getOnePost,\n  makeBid,\n  getOneDeal,\n  startDeal,\n  confirmDealToggle,\n  deleteDeal,\n  deletePost,\n  deleteReply\n};\nexport default postsApi;","map":{"version":3,"sources":["C:/Users/Riya/OneDrive/Desktop/trader-among-us-master/src/utils/posts-api.js"],"names":["getToken","BASE_URL","getAllPosts","res","fetch","method","ok","json","Error","getOnePost","id","create","data","payload","title","text","itemsOffered","headers","body","JSON","stringify","makeBid","postId","description","getOneDeal","replyId","startDeal","confirmDealToggle","deleteDeal","deletePost","deleteReply","postsApi"],"mappings":"AAAA,SAASA,QAAT,QAAyB,iBAAzB;AAEA,MAAMC,QAAQ,GAAG,YAAjB;;AAEA,eAAeC,WAAf,GAA6B;AAC3B,QAAMC,GAAG,GAAG,MAAMC,KAAK,CAACH,QAAD,EAAW;AAChCI,IAAAA,MAAM,EAAE;AADwB,GAAX,CAAvB;;AAGA,MAAIF,GAAG,CAACG,EAAR,EAAY;AACV,WAAOH,GAAG,CAACI,IAAJ,EAAP;AACD,GAFD,MAEO;AACL,UAAM,IAAIC,KAAJ,CAAU,2BAAV,CAAN;AACD;AACF;;AAED,eAAeC,UAAf,CAA0BC,EAA1B,EAA8B;AAC5B,QAAMP,GAAG,GAAG,MAAMC,KAAK,CAAE,GAAEH,QAAS,IAAGS,EAAG,EAAnB,EACrB;AAAEL,IAAAA,MAAM,EAAE;AAAV,GADqB,CAAvB;;AAGA,MAAIF,GAAG,CAACG,EAAR,EAAY;AACV,WAAOH,GAAG,CAACI,IAAJ,EAAP;AACD,GAFD,MAEO;AACL,UAAM,IAAIC,KAAJ,CAAU,0BAAV,CAAN;AACD;AACF;;AAED,eAAeG,MAAf,CAAsBC,IAAtB,EAA4B;AAC1B,QAAMC,OAAO,GAAG;AACdC,IAAAA,KAAK,EAAEF,IAAI,CAACE,KADE;AAEdC,IAAAA,IAAI,EAAEH,IAAI,CAACG,IAFG;AAGdC,IAAAA,YAAY,EAAEJ,IAAI,CAACI;AAHL,GAAhB;AAMA,QAAMb,GAAG,GAAG,MAAMC,KAAK,CAACH,QAAD,EAAW;AAChCI,IAAAA,MAAM,EAAE,MADwB;AAEhCY,IAAAA,OAAO,EAAE;AACP,sBAAgB,kBADT;AAEP,uBAAiB,YAAYjB,QAAQ;AAF9B,KAFuB;AAMhCkB,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeP,OAAf;AAN0B,GAAX,CAAvB;;AASA,MAAIV,GAAG,CAACG,EAAR,EAAY;AACV,WAAO,4BAAP;AACD,GAFD,MAEO;AACL,UAAM,IAAIE,KAAJ,CAAU,wBAAV,CAAN;AACD;AACF;;AAED,eAAea,OAAf,CAAuBC,MAAvB,EAA+BV,IAA/B,EAAqC;AACnC,QAAMC,OAAO,GAAG;AACdG,IAAAA,YAAY,EAAEJ,IAAI,CAACI,YADL;AAEdD,IAAAA,IAAI,EAAEH,IAAI,CAACW;AAFG,GAAhB;AAKA,QAAMpB,GAAG,GAAG,MAAMC,KAAK,CAAE,GAAEH,QAAS,IAAGqB,MAAO,QAAvB,EAAgC;AACrDjB,IAAAA,MAAM,EAAE,MAD6C;AAErDY,IAAAA,OAAO,EAAE;AACP,sBAAgB,kBADT;AAEP,uBAAiB,YAAYjB,QAAQ;AAF9B,KAF4C;AAMrDkB,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeP,OAAf;AAN+C,GAAhC,CAAvB;;AASA,MAAIV,GAAG,CAACG,EAAR,EAAY;AACV,WAAO,2BAAP;AACD,GAFD,MAEO;AACL,UAAM,IAAIE,KAAJ,CAAU,uBAAV,CAAN;AACD;AACF;AAED;AACA;;;AACA,eAAegB,UAAf,CAA0BF,MAA1B,EAAkCG,OAAlC,EAA2C;AACzC,QAAMtB,GAAG,GAAG,MAAMC,KAAK,CAAE,GAAEH,QAAS,IAAGqB,MAAO,UAASG,OAAQ,EAAxC,EACrB;AAAEpB,IAAAA,MAAM,EAAE;AAAV,GADqB,CAAvB;;AAGA,MAAIF,GAAG,CAACG,EAAR,EAAY;AACV,WAAOH,GAAG,CAACI,IAAJ,EAAP;AACD,GAFD,MAEO;AACL,WAAO,IAAP;AACD;AACF;;AAED,eAAemB,SAAf,CAAyBJ,MAAzB,EAAiCG,OAAjC,EAA0C;AACxC,QAAMtB,GAAG,GAAG,MAAMC,KAAK,CAAE,GAAEH,QAAS,IAAGqB,MAAO,UAASG,OAAQ,EAAxC,EAA2C;AAChEpB,IAAAA,MAAM,EAAE,MADwD;AAEhEY,IAAAA,OAAO,EAAE;AACP,sBAAgB,kBADT;AAEP,uBAAiB,YAAYjB,QAAQ;AAF9B;AAFuD,GAA3C,CAAvB;;AAOA,MAAIG,GAAG,CAACG,EAAR,EAAY;AACV,WAAO,IAAP;AACD,GAFD,MAEO;AACL,UAAM,IAAIE,KAAJ,CAAU,uBAAV,CAAN;AACD;AACF;;AAED,eAAemB,iBAAf,CAAiCL,MAAjC,EAAyCG,OAAzC,EAAkD;AAChD,QAAMtB,GAAG,GAAG,MAAMC,KAAK,CAAE,GAAEH,QAAS,IAAGqB,MAAO,UAASG,OAAQ,UAAxC,EAAmD;AACxEpB,IAAAA,MAAM,EAAE,MADgE;AAExEY,IAAAA,OAAO,EAAE;AACP,sBAAgB,kBADT;AAEP,uBAAiB,YAAYjB,QAAQ;AAF9B;AAF+D,GAAnD,CAAvB;;AAQA,MAAIG,GAAG,CAACG,EAAR,EAAY;AACV,WAAO,IAAP;AACD,GAFD,MAEO;AACL,UAAM,IAAIE,KAAJ,CAAU,yBAAV,CAAN;AACD;AACF;;AAED,eAAeoB,UAAf,CAA0BN,MAA1B,EAAkCG,OAAlC,EAA2C;AACzC,QAAMtB,GAAG,GAAG,MAAMC,KAAK,CAAE,GAAEH,QAAS,IAAGqB,MAAO,UAASG,OAAQ,SAAxC,EAAkD;AACvEpB,IAAAA,MAAM,EAAE,MAD+D;AAEvEY,IAAAA,OAAO,EAAE;AACP,sBAAgB,kBADT;AAEP,uBAAiB,YAAYjB,QAAQ;AAF9B;AAF8D,GAAlD,CAAvB;;AAQA,MAAIG,GAAG,CAACG,EAAR,EAAY;AACV,WAAOH,GAAP;AACD,GAFD,MAEO;AACL,UAAM,IAAIK,KAAJ,CAAU,yBAAV,CAAN;AACD;AACF;;AAED,eAAeqB,UAAf,CAA0BP,MAA1B,EAAkC;AAChC,QAAMnB,GAAG,GAAG,MAAMC,KAAK,CAAE,GAAEH,QAAS,IAAGqB,MAAO,SAAvB,EAAiC;AACtDjB,IAAAA,MAAM,EAAE,MAD8C;AAEtDY,IAAAA,OAAO,EAAE;AACP,uBAAiB,YAAYjB,QAAQ;AAD9B;AAF6C,GAAjC,CAAvB;;AAMA,MAAIG,GAAG,CAACG,EAAR,EAAY;AACV,WAAO,MAAMH,GAAG,CAACI,IAAJ,EAAb;AACD,GAFD,MAEO;AACL,UAAM,IAAIC,KAAJ,CAAU,uBAAV,CAAN;AACD;AACF;;AAED,eAAesB,WAAf,CAA2BL,OAA3B,EAAoC;AAClC,QAAMtB,GAAG,GAAG,MAAMC,KAAK,CAAE,gBAAeqB,OAAQ,SAAzB,EAAmC;AACxDpB,IAAAA,MAAM,EAAE,MADgD;AAExDY,IAAAA,OAAO,EAAE;AACP,uBAAiB,YAAYjB,QAAQ;AAD9B;AAF+C,GAAnC,CAAvB;;AAMA,MAAIG,GAAG,CAACG,EAAR,EAAY;AACV,WAAOH,GAAP;AACD,GAFD,MAEO;AACL,UAAM,IAAIK,KAAJ,CAAU,sBAAV,CAAN;AACD;AACF;;AAED,MAAMuB,QAAQ,GAAG;AACf7B,EAAAA,WADe;AAEfS,EAAAA,MAFe;AAGfF,EAAAA,UAHe;AAIfY,EAAAA,OAJe;AAKfG,EAAAA,UALe;AAMfE,EAAAA,SANe;AAOfC,EAAAA,iBAPe;AAQfC,EAAAA,UARe;AASfC,EAAAA,UATe;AAUfC,EAAAA;AAVe,CAAjB;AAaA,eAAeC,QAAf","sourcesContent":["import { getToken } from \"./users-service\";\n\nconst BASE_URL = \"/api/posts\";\n\nasync function getAllPosts() {\n  const res = await fetch(BASE_URL, {\n    method: \"GET\",\n  });\n  if (res.ok) {\n    return res.json();\n  } else {\n    throw new Error(\"Unable to retrieve posts.\");\n  }\n}\n\nasync function getOnePost(id) {\n  const res = await fetch(`${BASE_URL}/${id}`,\n    { method: \"GET\" }\n  );\n  if (res.ok) {\n    return res.json();\n  } else {\n    throw new Error(\"Unable to retrieve post.\");\n  }\n}\n\nasync function create(data) {\n  const payload = {\n    title: data.title,\n    text: data.text,\n    itemsOffered: data.itemsOffered,\n  };\n\n  const res = await fetch(BASE_URL, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Authorization\": \"Bearer \" + getToken(),\n    },\n    body: JSON.stringify(payload),\n  });\n\n  if (res.ok) {\n    return \"Post created successfully.\";\n  } else {\n    throw new Error(\"Unable to create post.\");\n  }\n}\n\nasync function makeBid(postId, data) {\n  const payload = {\n    itemsOffered: data.itemsOffered,\n    text: data.description,\n  };\n\n  const res = await fetch(`${BASE_URL}/${postId}/reply`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Authorization\": \"Bearer \" + getToken(),\n    },\n    body: JSON.stringify(payload),\n  });\n\n  if (res.ok) {\n    return \"Bid created successfully.\";\n  } else {\n    throw new Error(\"Unable to create bid.\");\n  }\n}\n\n/* postId is acually not used here, but keeping it for consistency\n * with the api route */\nasync function getOneDeal(postId, replyId) {\n  const res = await fetch(`${BASE_URL}/${postId}/deals/${replyId}`,\n    { method: \"GET\" }\n  );\n  if (res.ok) {\n    return res.json();\n  } else {\n    return null;\n  }\n}\n\nasync function startDeal(postId, replyId) {\n  const res = await fetch(`${BASE_URL}/${postId}/deals/${replyId}`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Authorization\": \"Bearer \" + getToken(),\n    },\n  });\n  if (res.ok) {\n    return true;\n  } else {\n    throw new Error(\"Unable to start deal.\");\n  }\n}\n\nasync function confirmDealToggle(postId, replyId) {\n  const res = await fetch(`${BASE_URL}/${postId}/deals/${replyId}/confirm`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Authorization\": \"Bearer \" + getToken(),\n    },\n  });\n\n  if (res.ok) {\n    return true;\n  } else {\n    throw new Error(\"Unable to confirm deal.\");\n  }\n}\n\nasync function deleteDeal(postId, replyId) {\n  const res = await fetch(`${BASE_URL}/${postId}/deals/${replyId}/delete`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Authorization\": \"Bearer \" + getToken(),\n    },\n  });\n\n  if (res.ok) {\n    return res;\n  } else {\n    throw new Error(\"Unable to confirm deal.\");\n  }\n}\n\nasync function deletePost(postId) {\n  const res = await fetch(`${BASE_URL}/${postId}/delete`, {\n    method: \"POST\",\n    headers: {\n      \"Authorization\": \"Bearer \" + getToken(),\n    },\n  });\n  if (res.ok) {\n    return await res.json();\n  } else {\n    throw new Error(\"Unable to delete Post\");\n  }\n}\n\nasync function deleteReply(replyId) {\n  const res = await fetch(`/api/replies/${replyId}/delete`, {\n    method: \"POST\",\n    headers: {\n      \"Authorization\": \"Bearer \" + getToken(),\n    },\n  });\n  if (res.ok) {\n    return res;\n  } else {\n    throw new Error(\"Unable to delete bid\");\n  }\n}\n\nconst postsApi = {\n  getAllPosts,\n  create,\n  getOnePost,\n  makeBid,\n  getOneDeal,\n  startDeal,\n  confirmDealToggle,\n  deleteDeal,\n  deletePost,\n  deleteReply,\n};\n\nexport default postsApi;\n"]},"metadata":{},"sourceType":"module"}